sblings_age <- data.frame(Sibling1 = c(5,7,4,3,3), Sibling2 = c(6, 5, 5, 4, NA) )
Both_less_than_5 = (Siblings$Sibling1 <= 5 ) && (Siblings$Sibling2 <= 5
?data.frame
data.frame
data("AirPassengers")
data("women")
women
sblings_age <- data.frame(Sibling1 = c(5,7,4,3,3), Sibling2 = c(6, 5, 5, 4, NA) )
sblings_age
Both_less_than_5 = (Siblings$Sibling1 <= 5 ) && (Siblings$Sibling2 <= 5
sblings_age
Both_less_than_5 = (Siblings$Sibling1 <= 5 ) && (Siblings$Sibling2) <= 5
Both_less_than_5 = (sblings_age$Sibling1 <= 5 ) && (Sblings_age$Sibling2) <= 5
Both_less_than_5 = sblings_age(($Sibling1 <= 5 ) && ($Sibling2) <= 5)
Both_less_than_5 = sblings_age((Sibling1 <= 5 ) && (Sibling2) <= 5)
Data("sblings_age")
sblings_age <- data.frame(Sibling1 = c(5,7,4,3,3), Sibling2 = c(6, 5, 5, 4, NA) )
Both_less_than_5 = (Siblings$Sibling1 <= 5 ) && (Siblings$Sibling2) <= 5
sblings_age <- data.frame(Sibling1 = c(5,7,4,3,3), Sibling2 = c(6, 5, 5, 4, NA) )
Both_less_than_5 = (sblings_age$Sibling1 <= 5 ) && (sblings_age$Sibling2 <= 5)
sblings_age <- data.frame(Sibling1 = c(5,7,4,3,3), Sibling2 = c(6, 5, 5, 4, NA) )
Both_less_than_5 = (sblings_age$Sibling1 <= 5 ) && (sblings_age$Sibling2 <= 5)
Both_less_than_5 = (sblings_age$Sibling1 <= 5 ) && (sblings_age$Sibling2 <= 5)
Both_less_than_5
Data("Both_less_than_5")
Data("sblings_age")
sblings_age
Both_less_than_5 = (Siblings$Sibling1 <= 5 )
Both_less_than_5 = (sblings_age$Sibling1 <= 5 )
Both_less_than_5
Both_less_than_5 = <- data.frame(sblings_age$Sibling1 <=5))
Both_less_than_5 <- data.frame((sblings_age$Sibling1 <=5))
Both_less_than_5
sblings_age
filter(sblings_age, (Sibling1 <=5) & (Sibling2 <=5))
library(dplyr) filter(sblings_age, (Sibling1 <=5) & (Sibling2 <=5))
library(dplyr)
subset(sblings_age, Sibling1 <= 5)
subset(sblings_age, Sibling1 <= 5 & Sibling2 <= 5)
Both_less_than_5 = subset(sblings_age, Sibling1 <= 5 & Sibling2 <= 5)
Both_less_than_5
sblings_age <- data.frame(Sibling1 = c(5,7,4,3,3), Sibling2 = c(6, 5, 5, 4, NA),Both_less_than_5)
Both_less_than_5 = (sblings_age$Sibling1 <= 5 )
Both_less_than_5
Both_less_than_5 = (sblings_age$Sibling1 <= 5 & sblings_age$Sibling2 <=5)
Both_less_than_5
sblings_age <- data.frame(Sibling1, Sibling2, Both_less_than5)
sblings_age <- data.frame(sblings_age$Sibling1, sblings_age$Sibling2, Both_less_than5)
Both_less_than_5
sblings_age <- data.frame(sblings_age$Sibling1, sblings_age$Sibling2, Both_less_than5c = c(Both_less_than5))
sblings_age[["new.col"]] <- Both_less_than_5
sblings_age
sblings_age <- data.frame(Sibling1 = c(5,7,4,3,3), Sibling2 = c(6, 5, 5, 4, NA) )
sblings_age
sblings_age[["Both_less_than_5"]] <- Both_less_than_5
sblings_age
mylist = [10,8,7,9]
x <-c(10,8,7,9)
max(x)
Thomas <-(10,8,7,9)
Thomas <-c(10,8,7,9)
min(Thomas)
mat = sapply(Thomas, function(x) as.numeric(as.character(x)))
print(mat)
mat = sapply(Thomas, function(x) as.numeric(max(x)))
print(mat)
mat = sapply(Thomas, function(x) as.numeric(max(x)))
print(mat)
Thomas
mymax = apply(Thomas,max)
Scores <- list(
Thomas = c(10,8,7,9),
Lily = c(6,8,10),
Ben = c(10, 9, 10, 7, 8),
Mary = c(9,10,8,7))
Scores
type(Scores)
Scores.type()
df <- data.frame(matrix(unlist(Scores), nrow=132, byrow=T),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(l))
df
print(df)
Scores
df = Scores.as.data.frame.list
df = as.data.frame.list(Scores)
df =as.data.frame(Scores, row.names = NULL, optional = FALSE)
sblings_age <- data.frame(Thomas = Thomas, Lily = Lily, Ben = Ben, Mary = Mary))
sblings_age <- data.frame(Thomas = $Thomas, Lily = $Lily, Ben = $Ben, Mary = $Mary))
sblings_age <- data.frame(Thomas = c(Thomas), Lily = c(Lily), Ben = c(Ben), Mary = c(Mary)))
sblings_age <- data.frame(Thomas = c(10,8,7,9), Lily = c(6,8,10), Ben = c(10,9,10,7,8), Mary = c(9,10,8,7))
df <- data.frame(Thomas = c(10,8,7,9,NA), Lily = c(6,8,10,NA,NA), Ben = c(10,9,10,7,8), Mary = c(9,10,8,7,NA))
df
dft = df.T
max(df)
min(df)
df.Thomas
print(df.Thomas)
df(apply(a, 1, range))
apply(df,1,range)
apply(df,2,range)
lapply(Scores, FUN = length)
lapply(Scores, FUN = max)
lapply(Scores, FUN = min)
lapply(Scores, FUN = max - min)
lapply(Scores, FUN = (max-min)
lapply(Scores, FUN = max)
lapply(Scores, FUN = (max-min))
lapply(Scores, FUN = (max,min))
lapply(Scores, FUN = (max))
mymax = lapply(Scores, FUN = (max))
mymin = lapply(Scores, FUN = (min))
mydiff = mymax - mymin
mydiff = lapply(max - min)
mymin
Map('-', mymax, mymin)
palindrome <- function(x){
percent <- round(x * 100, digits = 1)
result <- paste(percent, "%", sep = ")
return(result)
}
fdskfdskfds
hello <- function( name ) {
sprintf( "Hello, %s", name );
}
palindrome <- function( myword ) {
sprintf( "Hello, %s", myword );
}
palindrome('junk')
palindrome <- function( myword ) {
+     reversed <- rev(myword);
+ }
rev('junk')
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
strReverse(c("abc", "Statistics"))
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
strReverse(c("abc", "Statistics"))
strReverse <- function(x)
y = sapply(lapply(strsplit(x, NULL), rev), paste, collapse="");
strReverse(c("abc", "Statistics"))
strReverse <- function(x)
y = sapply(lapply(strsplit(x, NULL), rev), paste, collapse="");
strReverse(c("abc"))
strReverse <- function(x)
+     sapply(lapply(strsplit(x, NULL), rev), paste, collapse="");
>     strReverse(c("abc"))
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
strReverse(c("abc", "Statistics"))
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
strReverse(c("abc"))
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
strReverse(c("abc"))
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
strReverse(c("abc"))
strReverse <- function(x)
y = sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
strReverse(c("abc")); return(y)
strReverse <- function(x)
y <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse=""); return(y)
strReverse(c("abc"))
check <- function(x) {
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}check(-3)
check <- function(x) {
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check(-3)
check <- function(x) {
result <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
return(result)
check <- function(x) {
result <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse="");
return(result)
check <- function(x) {
result <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
return(result)}
check <- function(x) {
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check <- function(x) {
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check <- function(x) {
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="") if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check <- function(x) {
+     if (x > 0) {
+         result <- "Positive"
+     }
+     else if (x < 0) {
+         result <- "Negative"
+     }
+     else {
+         result <- "Zero"
+     }
+     return(result)
+ }
check <- function(x) {
+     if (x > 0) {
+         result <- "Positive"
+     }
+     else if (x < 0) {
+         result <- "Negative"
+     }
+     else {
+         result <- "Zero"
+     }
+     return(result)
+ }
check <- function(x) {
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check(4)
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check <- function(x) {
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
check(6)
palindrome <- function(x) {
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
palindrome(3)
palindrome <- function(x) {
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
if (x > 0) {
result <- "Positive"
}
else if (x < 0) {
result <- "Negative"
}
else {
result <- "Zero"
}
return(result)
}
palindrome(2)
palindrome <- function(x) {
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
result <- "Zero"
return(result)
}
palindrome('rest')
palindrome <- function(x) {
mypal <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
result <- "Zero"
return(result)
}
palindrome('tough')
palindrome <- function(x) {
mypal <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
result <- "Zero"
return(mypal)
}
palindrome('abc')
palindrome <- function(x) {
mypal <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
if (x = mypal) {
result <- "True"
}
return(mypal)
}
palindrome <- function(x) {
mypal <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
if (x == mypal) {
result <- "True"
}
return(mypal)
}
palindrome('civic')
palindrome <- function(x) {
mypal <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
if (x == mypal) {
result <- "True"
}
return(result)
}
palindrome('civic')
palindrome <- function(x) {
result <- "False"
mypal <- sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
if (x == mypal) {
result <- "True"
}
return(result)
}
palindrome('abc')
palindrome('civic')
palindrome('civic level')
palindrome('level')
palindrome <- function(inword) {
result <- "False"
mypal <- sapply(lapply(strsplit(inword, NULL), rev), paste, collapse="")
if (inword == mypal) {
result <- "True"
}
return(result)
}
palindrome('civic')
palindrome('strange')
palindrome <- function(inword) {
result <- "False"
mypal <- sapply(lapply(strsplit(inword, NULL), rev), paste, collapse="")
if (inword == mypal) {
result <- "True"
}
return(result)
}
palindrome('me')
palindrome('ewe')
word_compare <- function(word1, word2) {
result <- "False"
if (word1 == word2) {
result <- "True"
}
return(result)
}
word_compare('jump', 'high')
word_compare('jump','jump')
word_compare('jump','Jump')
word_compare <- function(word1, word2) {
result <- "False"
if (lowerCase(word1) == lowerCase(word2)) {
result <- "True"
}
return(result)
}
word_compare('jump','Jump')
import utilities
word_compare <- function(word1, word2) {
result <- "False"
if (tolower(word1) == tolower(word2)) {
result <- "True"
}
return(result)
}
word_compare('jump','Jump')
word_compare('stuff','junk')
plot(cars)
library(httr)
read.csv(text=GET("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv"))
library(httr)
read.csv(text=GET("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv"))
data <- read.csv(text=GET("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv"))
data <- read.csv(text=GET("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv"))
data <- read.csv(text=GET("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv"))
data <- read.csv(text=GET("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv"))
data <- read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv"))
data <- read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv"))
head(data)
mydata <- read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv"))
mydata <- read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv")
mydata <- read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv", quote = "",
row.names = NULL,
stringsAsFactors = FALSE)
mydata <- read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv", quote = "",
row.names = NULL,
stringsAsFactors = FALSE)
read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv", quote = "",
row.names = NULL,
stringsAsFactors = FALSE)
read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv", quote = "",
row.names = NULL,
stringsAsFactors = FALSE)
read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv", quote = "", row.names = NULL, stringsAsFactors = FALSE)
read.csv(url("https://github.com/krpopkin/DATA607-Class-Repository/blob/master/Week%201/approval_polllist.csv", quote = "", row.names = NULL, stringsAsFactors = FALSE)
ad <- read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
head(ad)
ad <- read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
head(ad)
library(data.table)
library(readr)
install.packages("data.table", dependencies=TRUE)
install.packages("readr")
library(data.table)
ad <- fread("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
head(ad)
install.packages("data.table", dependencies=TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
library(data.table)
ad <- fread("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
head(ad)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
ad <- read_csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
library(readr)
ad <- read_csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
head(ad)
library(data.table)
ad <- fread("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
head(ad)
library(data.table)
ad <- fread(url("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv"))
library(data.table)
bees <- read.csv('http://www.calvin.edu/~sld33/data/FlyingBees.csv')
bees <- read.csv('http://www.calvin.edu/~sld33/data/FlyingBees.csv')
bees <- read.csv('http://www.calvin.edu/~sld33/data/FlyingBees.csv')
bees <- read.csv('http://www.calvin.edu/~sld33/data/FlyingBees.csv')
setwd("~/00_Applications_DataScience/CUNY/DATA607/DATA607-Class-Repository/Week 1")
